AWSTemplateFormatVersion: '2010-09-09'
Description: 'stack: orma | stage: dev | deployed by Kes'

Resources:

  #################################################
  # ECS config BEGIN
  #################################################

  ECSCluster:
    Type: AWS::ECS::Cluster

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: orma-dev-ecs-securitygroup
      GroupDescription: Security Group for ECS containter instances of orma-dev
      Tags:
        - Key: Name
          Value: "orma-dev"
      VpcId: vpc-dfe524ba
      SecurityGroupEgress:
        CidrIp: 0.0.0.0/0
        IpProtocol: -1
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443

  ContainerInstanceLaunch:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            01_add_instance_to_cluster:
              command: !Sub |
                #!/bin/bash
                echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
                echo ECS_ENGINE_TASK_CLEANUP_WAIT_DURATION=1m >> /etc/ecs/ecs.config
          files:
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ContainerInstanceLaunch.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ContainerInstanceLaunch --region ${AWS::Region}
                runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - "/etc/cfn/cfn-hup.conf"
                - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
    Properties:
      SecurityGroups:
        - !GetAtt SecurityGroup.GroupId
      ImageId: ami-9eb4b1e5
      InstanceType: t2.medium
      IamInstanceProfile: arn:aws:iam::552819999234:instance-profile/orma-ecs
      BlockDeviceMappings:
      - DeviceName: "/dev/xvda"
        Ebs:
          DeleteOnTermination: true
          VolumeSize: 50
      KeyName: openroads
      UserData:
        "Fn::Base64": !Join
          - ""
          - - "#cloud-config\n"
            - "\nruncmd:\n"
            - " - yum install -y aws-cfn-bootstrap\n"
            - !Sub " - /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ContainerInstanceLaunch --region ${AWS::Region}\n"
            - !Sub " - /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}"


  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 0
    Properties:
      AvailabilityZones:
        - us-east-1a
      LaunchConfigurationName: !Ref ContainerInstanceLaunch
      MinSize: '0'
      MaxSize: 1
      DesiredCapacity: 1
      Tags:
      - Key: Name
        Value: "orma-dev-ecs"
        PropagateAtLaunch: true

  # adding TaskDefinition for Lambda/ECS services
  vnTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: postgres
          Cpu: 100
          Essential: true
          Environment:
            - Name: POSTGRES_DB
              Value: openroads
            - Name: AWS_DEFAULT_REGION
              Value: !Sub ${AWS::Region}
            - Name: AWS_REGION
              Value: !Sub ${AWS::Region}
          Image: openroads/vn-api-db:0.2.0
          PortMappings:
            - ContainerPort: 5432
              HostPort: 5433
              Protocol: tcp
          MemoryReservation: 800
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref vnEcsLogs
              awslogs-region: !Sub ${AWS::Region}
        - Name: webapp
          Cpu: 100
          Essential: true
          Environment:
            - Name: DATABASE_URL
              Value: postgres://postgres@postgres:5432/openroads
            - Name: AWS_DEFAULT_REGION
              Value: !Sub ${AWS::Region}
            - Name: AWS_REGION
              Value: !Sub ${AWS::Region}
          Image: openroads/vn-api-app:0.2.0
          Links:
            - postgres
          PortMappings:
            - ContainerPort: 4000
              HostPort: 80
              Protocol: tcp
          MemoryReservation: 800
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref vnEcsLogs
              awslogs-region: !Sub ${AWS::Region}

  vnEcsLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: orma-dev-vnEcsLogs

  vnECSService:
    Type: AWS::ECS::Service
    DependsOn:
    - ECSAutoScalingGroup
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      TaskDefinition: !Ref vnTaskDefinition
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0


  #################################################
  # ECS config END
  #################################################


