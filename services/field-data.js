'use strict';

var fc = require('@turf/helpers').featureCollection;
var groupBy = require('lodash').groupBy;
var map = require('lodash').map;
/**
 * @func groupGeometriesBySource
 * Given an array of objects representing all geometry for a given road id
 * returns those geometries grouped by field data source
 * @param geoms {array} array of field data geometries generated by a knex query
 * @return {array} array of field data geometries grouped by field data source
 */
exports.groupGeometriesById = function (geoms) {
  geoms = groupBy(geoms, (geom) => geom.source);
  return map(geoms, (geom) => {
    // map list of row objects to geojson features.
    return fc(geom.map((geom) => {
      return {
        type: 'LineString',
        properties: {id: geom.road_id},
        geometry: JSON.stringify(geom.geometry)
      };
    }));
  });
};

/**
 * given a list objects with road geometries, id, and source, creates a feature class from the array
 * @func makeGeomFC
 * @param {array} geoms list of objects, each of which including a road geometry, its road id, and its source
 * @return {featureCollection} feature collection for roads.
 */
exports.makeGeomsFC = function (geoms) {
  // make features, a list of GeoJSON features, from the raw geoms array provided
  let features = map(geoms, (geom, k) => {
    // first parse the stringified feature geometry generated from the ST_ASGeoJSON() query used as part of the endpoint
    const geometry = { geometry: JSON.parse(geom.geometry) };
    // generate a properties object with the road_id and source provided too from the query
    const props = {properties:  {road_id: geom.road_id, source: geom.source}};
    // return a GeoJSON feature including both the geometry and properties
    return Object.assign(geometry, props);
  });
  // return this list of features passed through the turn feature collection function, which returns a feature collection
  return fc(features);
};


/**
 * given two arrays, one with road ids in the database, the other of road ids provided to an api query
 * returns an object where each key is a road id and its value is a boolean, true if the VProMMsId is in the db, false if not
 * @func mapExistingIds
 * @param {array} existingIds list of ids existing in the database
 * @param {array} ids list of ids provided to an api query
 * @return {object} object where key is a road id, and each property is a boolean (true if in the db, false if not)
 */
exports.mapExistingIds = function (existingIds, ids) {
  // initialize the ids object to serve as the response
  let idsObj = {};
  // transform list of ids into objects denoting if they exist in the database
  ids.forEach(id => {
    // isAnExistingId searches for `id` in the `existingids` list, then casts the search to a boolean. (true if found, false if not)
    const isAnExistingId = Boolean(existingIds.find(existingId => existingId.road_id === id));
    // add a key = the current id and a value = isAnExistingId for the current object
    idsObj[id] = isAnExistingId;
  });
  return idsObj;
};
